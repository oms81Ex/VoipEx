version: '3.8'

services:
  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    platform: linux/amd64
    container_name: voip-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - api-gateway
      - signaling-service
    networks:
      - voip-network

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile.amd64
    platform: linux/amd64
    container_name: voip-api-gateway
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=12qwaszx
    depends_on:
      - redis
      - mongodb
    networks:
      - voip-network
    command: npm run dev

  # Room 서비스
  room-service:
    build:
      context: ./room-service
      dockerfile: Dockerfile
    platform: linux/amd64
    container_name: voip-room-service
    volumes:
      - ./room-service:/app
      - /app/node_modules
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
      - PORT=3006
      - MONGODB_URL=mongodb://admin:12qwaszx@mongodb:27017/voip_rooms?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=12qwaszx
      - AUTH_SERVICE_URL=http://voip-auth-service:3001
    depends_on:
      - mongodb
      - redis
    networks:
      - voip-network
    command: npm run dev

  # 인증 서비스
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile.amd64
    platform: linux/amd64
    container_name: voip-auth-service
    volumes:
      - ./auth-service:/app
      - /app/node_modules
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - MONGODB_URL=mongodb://admin:12qwaszx@mongodb:27017/voip_auth?authSource=admin
      - REDIS_HOST=redis
      - JWT_SECRET=your-super-secret-jwt-key
    depends_on:
      - mongodb
      - redis
    networks:
      - voip-network
    command: npm run dev

  # 사용자 서비스
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile.amd64
    platform: linux/amd64
    container_name: voip-user-service
    volumes:
      - ./user-service:/app
      - /app/node_modules
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - MONGODB_URL=mongodb://admin:12qwaszx@mongodb:27017/voip_users?authSource=admin
      - REDIS_HOST=redis
      - AUTH_SERVICE_URL=http://voip-auth-service:3001
    depends_on:
      - mongodb
      - redis
    networks:
      - voip-network
    command: npm run dev

  # 통화 서비스
  call-service:
    build:
      context: ./call-service
      dockerfile: Dockerfile.amd64
    platform: linux/amd64
    container_name: voip-call-service
    volumes:
      - ./call-service:/app
      - /app/node_modules
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - MONGODB_URL=mongodb://admin:12qwaszx@mongodb:27017/voip_calls?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PASSWORD=12qwaszx
      - AUTH_SERVICE_URL=http://voip-auth-service:3001
    depends_on:
      - mongodb
      - redis
    networks:
      - voip-network
    command: npm run dev

  # 시그널링 서비스
  signaling-service:
    build:
      context: ./signaling-service
      dockerfile: Dockerfile.amd64
    platform: linux/amd64
    container_name: voip-signaling-service
    volumes:
      - ./signaling-service:/app
      - /app/node_modules
    ports:
      - "3004:3004"
      - "3004:3004/udp"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - REDIS_HOST=redis
      - JWT_SECRET=your-super-secret-jwt-key
    depends_on:
      - redis
    networks:
      - voip-network
    command: npm run dev

  # 미디어 서비스
  media-service:
    build:
      context: ./media-service
      dockerfile: Dockerfile.amd64
    platform: linux/amd64
    container_name: voip-media-service
    volumes:
      - ./media-service:/app
      - /app/node_modules
      - ./volumes/recordings:/recordings
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PORT=3005
      - KURENTO_URL=ws://kurento:8888/kurento
      - REDIS_HOST=redis
      - RECORDING_PATH=/recordings
      - MONGODB_URL=mongodb://admin:12qwaszx@mongodb:27017/voip_media?authSource=admin
    depends_on:
      - kurento
      - redis
      - mongodb
    networks:
      - voip-network
    command: npm run dev

  # Kurento 미디어 서버
  kurento:
    image: kurento/kurento-media-server:7.0
    platform: linux/amd64
    container_name: voip-kurento
    ports:
      - "8888:8888"
    environment:
      - GST_DEBUG=2,Kurento*:5
      - KMS_MIN_PORT=40000
      - KMS_MAX_PORT=50000
    networks:
      - voip-network

  # MongoDB
  mongodb:
    image: mongo:4.4
    platform: linux/amd64
    container_name: voip-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=12qwaszx
    volumes:
      - ./volumes/mongodb:/data/db
      - ./docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - voip-network

  # Redis
  redis:
    image: redis:7-alpine
    platform: linux/amd64
    container_name: voip-redis
    command: redis-server --requirepass 12qwaszx --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - ./volumes/redis:/data
    networks:
      - voip-network

  # TURN Server (Coturn)
  coturn:
    image: coturn/coturn:latest
    platform: linux/amd64
    container_name: voip-turn
    network_mode: host
    volumes:
      - ./docker/coturn/turnserver.conf:/etc/turnserver.conf:ro
    command: -c /etc/turnserver.conf

  # Prometheus (모니터링)
  prometheus:
    image: prom/prometheus:latest
    platform: linux/amd64
    container_name: voip-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - voip-network

  # Grafana (모니터링 대시보드)
  grafana:
    image: grafana/grafana:latest
    platform: linux/amd64
    container_name: voip-grafana
    ports:
      - "3007:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=12qwaszx
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - voip-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.amd64
    platform: linux/amd64
    container_name: voip-frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "8081:80"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3000/api
      - VITE_WS_URL=ws://localhost:3004
    depends_on:
      - api-gateway
      - signaling-service
    networks:
      - voip-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 3s
      retries: 3

networks:
  voip-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
